name: Publish Docker Image

# Dieser Workflow wird nach Abschluss des "Build Package"-Workflows gestartet.
on:
  workflow_run:
    workflows: [ "Run Tests" ]
    types:
      - completed

jobs:
  build-and-publish:
    # Der Job wird nur ausgeführt, wenn der Build Package-Workflow erfolgreich abgeschlossen wurde.
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Checkout Repository
        # Checkt den Code aus dem Repository aus.
        uses: actions/checkout@v4

      - name: Set up JDK 17
        # Richtet die Java-Umgebung (JDK 17) ein.
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        # Baut das Maven-Projekt; Tests werden übersprungen.
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        # Meldet sich bei Docker Hub an, um Images pushen zu können.
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        # Meldet sich beim GitHub Container Registry an.
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        # Extrahiert Metadaten wie Tags und Labels, die für das Docker-Image verwendet werden.
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/quarkus-service-2
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        # Baut das Docker-Image und pusht es in die entsprechenden Registries.
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        # Generiert eine Build-Provenance, welche als Nachweis des Build-Artefakts dient.
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
